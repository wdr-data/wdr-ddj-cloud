---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Cloudformation stack to manage permission to deploy a serverless service"

Parameters:
  ServiceName:
    Description: Name of the Service you want to deploy
    Type: String

Resources:
  ## Managed policies
  ServerlessDeployCFPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "cloudformation:ValidateTemplate"
            Resource: "*"

          - Effect: Allow
            Action:
              - "cloudformation:Describe*"
              - "cloudformation:List*"
              - "cloudformation:Get*"
              - "cloudformation:PreviewStackUpdate"
              - "cloudformation:CreateStack"
              - "cloudformation:UpdateStack"
              - "cloudformation:RollbackStack"
              - "cloudformation:CreateChangeSet"
              - "cloudformation:ExecuteChangeSet"
              - "cloudformation:DeleteChangeSet"

              - "cloudformation:TagResource"
              - "cloudformation:UntagResource"
            Resource:
              - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ServiceName}-*"

  ServerlessDeployS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${ServiceName}-*"

          - Effect: Allow
            Action:
              - "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${ServiceName}-*/*"

  ServerlessDeployLogsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:DescribeLogGroups"
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group::log-stream:*"

          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:DeleteLogGroup"
              - "logs:DeleteLogStream"
              - "logs:DescribeLogStreams"
              - "logs:FilterLogEvents"
              - "logs:PutMetricFilter"

              - "logs:TagLogGroup"
              - "logs:UntagLogGroup"
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:log-stream:*"

  ServerlessDeployIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "iam:GetRole"
              - "iam:PassRole"
              - "iam:CreateRole"
              - "iam:DeleteRole"
              - "iam:GetRolePolicy"
              - "iam:DetachRolePolicy"
              - "iam:PutRolePolicy"
              - "iam:AttachRolePolicy"
              - "iam:DeleteRolePolicy"

              - "iam:TagPolicy"
              - "iam:UntagPolicy"

              - "iam:TagRole"
              - "iam:UntagRole"
            Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/${ServiceName}-*"

  ServerlessDeployLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "apigateway:GET"
              - "apigateway:POST"
              - "apigateway:PUT"
              - "apigateway:DELETE"
              - "apigateway:PATCH"
            Resource:
              - !Sub "arn:aws:apigateway:${AWS::Region}::/restapis"
              - !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/*"

          - Effect: Allow
            Action:
              - "lambda:*"
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ServiceName}-*"

          - Effect: Allow
            Action:
              - "ec2:DescribeSecurityGroups"
              - "ec2:DescribeSubnets"
              - "ec2:DescribeVpcs"
            Resource: "*"

          - Effect: Allow
            Action:
              - "events:Put*"
              - "events:Remove*"
              - "events:Delete*"
              - "events:Describe*"

              - "events:TagResource"
              - "events:UntagResource"
            Resource:
              - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${ServiceName}-*"

          - Effect: Allow
            Action:
              - "states:CreateStateMachine"
            Resource:
              - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*"

          - Effect: Allow
            Action:
              - "states:DescribeStateMachine"
              - "states:DeleteStateMachine"
              - "states:UpdateStateMachine"

              - "states:TagResource"
              - "states:UntagResource"
            Resource:
              - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ServiceName}-*"

  ServerlessCloudFrontPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cloudfront:*"
              - "acm:ListCertificates"

            Resource:
              - "*"

  ServerlessLambdaTestPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # List & describe all Lambdas
          - Effect: Allow
            Action:
              - lambda:ListFunctions
              - lambda:GetFunction
              - lambda:GetFunctionConfiguration
              - lambda:GetFunctionEventInvokeConfig
              - lambda:ListVersionsByFunction
              - lambda:ListAliases
              - lambda:GetAlias
              - lambda:ListTags
            Resource: "*"

          # Invoke only your service’s functions
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ServiceName}-*

          # Read recent logs from invocations
          - Effect: Allow
            Action:
              - logs:DescribeLogStreams
              - logs:GetLogEvents
              - logs:FilterLogEvents
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ServiceName}-*:log-stream:*

          # Manage shared test-event definitions
          - Effect: Allow
            Action:
              - lambda:ListFunctionEventInvokeConfigs
              - lambda:GetFunctionEventInvokeConfig
              - lambda:PutFunctionEventInvokeConfig
              - lambda:DeleteFunctionEventInvokeConfig
            Resource:
              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ServiceName}-*

          # Some registry operations must be global
          - Effect: Allow
            Action:
              - schemas:ListRegistries
              - schemas:CreateRegistry
              - schemas:GetDiscoveredSchema
            Resource: "*"

          # All other schema‐registry operations scoped to the lambda-testevent-schemas registry
          - Effect: Allow
            Action:
              - schemas:CreateSchema
              - schemas:DeleteSchema
              - schemas:DeleteSchemaVersion
              - schemas:DescribeRegistry
              - schemas:DescribeSchema
              - schemas:ListSchemaVersions
              - schemas:UpdateSchema
            Resource:
              - !Sub "arn:aws:schemas:${AWS::Region}:${AWS::AccountId}:registry/lambda-testevent-schemas"
              - !Sub "arn:aws:schemas:${AWS::Region}:${AWS::AccountId}:schema/lambda-testevent-schemas/*"

  ServerlessLambdaTestGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub "${ServiceName}-lambda-test-group"
      ManagedPolicyArns:
        - !Ref ServerlessLambdaTestPolicy

  ServerlessS3ReadOnlyPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${ServiceName}-s3-readonly"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Allow listing buckets and their location
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: "*"
          # Allow read access to all objects and bucket metadata
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketPolicy
            Resource:
              - "arn:aws:s3:::*"
              - "arn:aws:s3:::*/*"

  ServerlessS3ReadOnlyGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub "${ServiceName}-s3-readonly-group"
      ManagedPolicyArns:
        - !Ref ServerlessS3ReadOnlyPolicy
