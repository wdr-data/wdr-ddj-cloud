configValidationMode: error

service: wdr-ddj-cloud

plugins:
  - serverless-python-requirements

custom:
  stage: '${env:STAGE}'
  bucketName: '${self:service}-${env:STAGE}'
  pythonRequirements:
    usePipenv: true
    # We're very short on space, so we remove as much from the requirements as possible
    slim: true

    slimPatterns:
      # Remove tests
      - '**/tests/**'
      # googleapiclient/discovery_cache/documents contains about 60MB of JSON
      # We only want to take what we need here
      - 'googleapiclient/discovery_cache/documents/!(bigquery.v2.json)'

    # These are available on the default Python Lambda image
    noDeploy:
      - botocore
      - boto3

    # Configure custom cache location for CI
    useStaticCache: true
    useDownloadCache: true
    cacheLocation: './.serverless-python-cache'
    staticCacheMaxVersions: 1

package:
  # Ignore everything but the ddj_cloud module
  patterns:
    - '!**'
    - 'ddj_cloud/**'

resources:
  Resources:
    # S3 Bucket to hold scraping results
    DataBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: '${self:custom.bucketName}'
        AccessControl: 'PublicRead'
        PublicAccessBlockConfiguration:
          {
            'BlockPublicAcls': false,
            'BlockPublicPolicy': false,
            'IgnorePublicAcls': false,
            'RestrictPublicBuckets': false,
          }
        CorsConfiguration:
          CorsRules:
            - {
                'AllowedHeaders': ['Authorization'],
                'AllowedMethods': ['GET', 'HEAD'],
                'AllowedOrigins': ['*'],
                'ExposedHeaders': [],
              }

    # Cache Policy for CORS support
    CORSCachePolicy:
      Type: AWS::CloudFront::CachePolicy
      Properties:
        CachePolicyConfig:
          Comment: 'Cache Policy that respects headers needed for CORS to work correctly'
          DefaultTTL: 3600
          MaxTTL: 31536000
          MinTTL: 1
          Name: 'CachePolicyCORS'
          ParametersInCacheKeyAndForwardedToOrigin:
            CookiesConfig:
              CookieBehavior: 'none'
            EnableAcceptEncodingBrotli: 'true'
            EnableAcceptEncodingGzip: 'true'
            HeadersConfig:
              HeaderBehavior: 'whitelist'
              Headers:
                - Origin
                - Access-Control-Request-Method
                - Access-Control-Request-Headers
            QueryStringsConfig:
              QueryStringBehavior: 'none'

    CloudFrontDistributionDataBucketOriginAccessIdentity:
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'Origin Access Identity for accessing protected S3 resources'

    # CloudFront Distribution for DataBucket
    CloudFrontDistributionDataBucket:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: 'CloudFront Distribution for S3 Bucket ${self:custom.bucketName}'
          Enabled: 'true'
          HttpVersion: 'http2'
          IPV6Enabled: 'true'
          PriceClass: 'PriceClass_All' # Distribute worldwide
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId: 's3-origin-${self:service}-data-${self:provider.stage}'
            ViewerProtocolPolicy: 'redirect-to-https'
            Compress: 'true'
            OriginRequestPolicyId: '88a5eaf4-2fd4-4709-b370-b4c650ea3fcf' # Managed-CORS-S3Origin
            CachePolicyId:
              Ref: CORSCachePolicy
          Origins:
            - DomainName: '${self:custom.bucketName}.s3.${self:provider.region}.amazonaws.com'
              Id: 's3-origin-${self:service}-data-${self:provider.stage}'
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    - - 'origin-access-identity/cloudfront/'
                      - Ref: CloudFrontDistributionDataBucketOriginAccessIdentity

provider:
  name: aws
  region: eu-central-1
  runtime: python3.9
  stage: ${self:custom.stage}
  tags:
    PRODUCT: ${self:service}
  stackTags:
    PRODUCT: ${self:service}
  stackName: 'cf-stack-${self:service}-${self:custom.stage}'
  environment:
    STAGE: ${self:custom.stage}
    BUCKET_NAME: ${self:custom.bucketName}
    SENTRY_DSN: ${env:SENTRY_DSN}
    CLOUDFRONT_ID:
      Ref: CloudFrontDistributionDataBucket
  iam:
    role:
      statements:
        # S3
        - Effect: Allow
          Action:
            - s3:*
          Resource: 'arn:aws:s3:::${self:custom.bucketName}/*'

        # Cloudfront
        - Effect: Allow
          Action:
            - 'cloudfront:ListDistributions'
          Resource: '*'

        - Effect: Allow
          Action:
            - 'cloudfront:GetDistribution'
            - 'cloudfront:GetDistributionConfig'
            - 'cloudfront:ListInvalidations'
            - 'cloudfront:GetInvalidation'
            - 'cloudfront:CreateInvalidation'
          Resource:
            Fn::Join:
              - ''
              - - 'arn:aws:cloudfront::'
                - Ref: AWS::AccountId
                - ':distribution/'
                - Ref: CloudFrontDistributionDataBucket
# Functions are generated at deploy time by manage.py
